# The build flows as follows:
# 1. Stage 1 (Building Base Images) builds and pushes the base docker images which
#    contain all the build and packaging dependencies.
# 2. Stage 2 (Unit Testing) runs the unittests on the `Trusty` VM, and also in docker
#    containers run off the base images from stage 1.
# 3. Stage 3 (Packaging and Deployment) packages rebirthdb and deploys the packages to
#    to bintray, executing the steps in containers run off the base images from stage 1.

# The following environment variables are set on travis:
# 1. DOCKER_USERNAME : The account whose password is used to authenticate requests to docker.
# 2. DOCKER_PASSWORD : The password for the docker account with the above username.
# 3. DOCKERCLOUD_NAMESPACE : The namespace under which docker images are pushed to / pulled from.
# 4. BINTRAY_USER : This is the bintray account whose API key is used to authenticate requests.
# 5. BINTRAY_API_KEY : The bintray account's API key used for authentication
# 6. BINTRAY_SUBJECT : The bintray account to whose repositories, the packages are deployed.

# We make use of YAML's block scalar styles to write the multi-line commands.
# For a good explanation of their use, see this StackOverflow answer at:
# https://stackoverflow.com/a/21699210/6163906

sudo: required
dist: trusty
language: cpp

notifications:
  email:
  - rebirthdb-dev@googlegroups.com

jobs:
  include:
  - stage: Building Base Images
    name: Trusty Base Image (Docker)
    env: DISTRIBUTION=trusty
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - name: Xenial Base Image (Docker)
    env: DISTRIBUTION=xenial
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - name: Bionic Base Image (Docker)
    env: DISTRIBUTION=bionic
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - name: Jessie Base Image (Docker)
    env: DISTRIBUTION=jessie
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - name: Stretch Base Image (Docker)
    env: DISTRIBUTION=stretch
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - name: Centos 7 Base Image (Docker)
    env: DISTRIBUTION=centos7
    install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get -qq update
    - sudo apt-get -y install docker-ce build-essential
    script:
    - ./configure --allow-fetch --dynamic jemalloc
    - make dist
    - tar xvzf build/packages/rebirthdb-$(./scripts/gen-version.sh).tgz -C docker/$DISTRIBUTION --strip-components=1
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - cd docker/$DISTRIBUTION
    - docker build -t rebirthdb-$DISTRIBUTION-base .
    - docker images
    - docker tag rebirthdb-$DISTRIBUTION-base $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)
    - docker push $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh)

  - stage: Unit Testing
    # We use the tests on the Trusty VM as our baseline, and then to generate the coverage results.
    name: Trusty Unit Tests (VM)
    env:
    - DISTRIBUTION=trusty
    compiler: gcc
    before_install:
    # -qq is so that we get no output except for errors. This reduces the size of the
    # output log file. Travis has a hard limit of 4MBs, beyond which it terminates the
    # build process.
    - sudo apt-get -qq update
    - sudo apt-get -qq -y install mg
    - sudo apt-get -qq -y install build-essential protobuf-compiler python
    - sudo apt-get -qq -y install libprotobuf-dev libcurl4-openssl-dev libboost-all-dev
    - sudo apt-get -qq -y install libncurses5-dev libjemalloc-dev wget m4 lcov
    - pip install --user cpp-coveralls
    install:
    - ./configure --allow-fetch
    - make -j $(($(nproc) + 1)) COVERAGE=1 && make test -j $(($(nproc) + 1)) COVERAGE=1
    script:
    # This step runs lcov and generates the necessary coverage information
    - make coverage -j $(($(nproc) + 1)) COVERAGE=1
    after_success:
    # All that's left for coveralls is to upload the coverage info
    - coveralls --no-gcov --lcov-file build/release/coverage.info

  - name: Trusty Unit Tests (Docker)
    env: DISTRIBUTION=trusty
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"

  - name: Xenial Unit Tests (Docker)
    env: DISTRIBUTION=xenial
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"

  - name: Bionic Unit Tests (Docker)
    env: DISTRIBUTION=bionic
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"

  - name: Jessie Unit Tests (Docker)
    env: DISTRIBUTION=jessie
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"

  - name: Stretch Unit Tests (Docker)
    env: DISTRIBUTION=stretch
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"

  - name: Centos 7 Unit Tests (Docker)
    env: DISTRIBUTION=centos7
    script:
    - |
      docker run $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) /bin/bash -c \
      "pwd && ./configure --allow-fetch --dynamic jemalloc && \
      make test -j $(($(nproc) + 1)) && \
      ./build/release/rebirthdb-unittest"



  - stage: Packaging and Deployment
    # We don't sign the package (SIGN_PACKAGE=0) while building it on travis because bintray will do that
    # automatically once we upload the package.
    # This condition '"$TRAVIS_TAG" =~ ^v[\d]+.[\d]+.[\d]+$' matches tags of the form v2.4.0 and does not
    # match v2.4.0-beta.0
    name: Trusty Packaging and Deployment
    env: DISTRIBUTION=trusty
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./configure --allow-fetch && \
      make build-deb -j $(($(nproc) + 1)) \
        UBUNTU_RELEASE=$DISTRIBUTION
        PACKAGE_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        SIGN_PACKAGE=0 && \
      cp build/packages/rebirthdb_*.deb /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb/$(./scripts/gen-version.sh)
        pool/r/rebirthdb/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb-dev/$(./scripts/gen-version.sh)
        pool/r/rebirthdb-dev/
      on:
        all_branches: true
      skip_cleanup: true

  - name: Xenial Packaging and Deployment
    env: DISTRIBUTION=xenial
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./configure --allow-fetch && \
      make build-deb -j $(($(nproc) + 1)) \
        UBUNTU_RELEASE=$DISTRIBUTION
        PACKAGE_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        SIGN_PACKAGE=0 && \
      cp build/packages/rebirthdb_*.deb /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb/$(./scripts/gen-version.sh)
        pool/r/rebirthdb/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb-dev/$(./scripts/gen-version.sh)
        pool/r/rebirthdb-dev/
      on:
        all_branches: true
      skip_cleanup: true

  - name: Bionic Packaging and Deployment
    env: DISTRIBUTION=bionic
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./configure --allow-fetch && \
      make build-deb -j $(($(nproc) + 1)) \
        UBUNTU_RELEASE=$DISTRIBUTION
        PACKAGE_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        SIGN_PACKAGE=0 && \
      cp build/packages/rebirthdb_*.deb /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb/$(./scripts/gen-version.sh)
        pool/r/rebirthdb/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb-dev/$(./scripts/gen-version.sh)
        pool/r/rebirthdb-dev/
      on:
        all_branches: true
      skip_cleanup: true

  - name: Jessie Packaging and Deployment
    env: DISTRIBUTION=jessie
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./configure --allow-fetch && \
      make build-deb -j $(($(nproc) + 1)) \
        DEB_RELEASE=$DISTRIBUTION
        PACKAGE_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        SIGN_PACKAGE=0 && \
      cp build/packages/rebirthdb_*.deb /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb/$(./scripts/gen-version.sh)
        pool/r/rebirthdb/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb-dev/$(./scripts/gen-version.sh)
        pool/r/rebirthdb-dev/
      on:
        all_branches: true
      skip_cleanup: true

  - name: Stretch Packaging and Deployment
    env: DISTRIBUTION=stretch
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./configure --allow-fetch && \
      make build-deb -j $(($(nproc) + 1)) \
        DEB_RELEASE=$DISTRIBUTION
        PACKAGE_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        SIGN_PACKAGE=0 && \
      cp build/packages/rebirthdb_*.deb /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb/$(./scripts/gen-version.sh)
        pool/r/rebirthdb/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --deb=$DISTRIBUTION/main/amd64
        --override=true
        "/rebirthdb_packages/rebirthdb_*.deb"
        $BINTRAY_SUBJECT/apt/rebirthdb-dev/$(./scripts/gen-version.sh)
        pool/r/rebirthdb-dev/
      on:
        all_branches: true
      skip_cleanup: true

  - name: Centos 7 Packaging and Deployment
    env: DISTRIBUTION=centos7
    before_script:
    - sudo mkdir /rebirthdb_packages
    script:
    - |
      docker run -v /rebirthdb_packages:/rebirthdb_packages $DOCKERCLOUD_NAMESPACE/rebirthdb-$DISTRIBUTION-base:$(./scripts/gen-version.sh) \
      /bin/bash -c "./scripts/build-rpm.sh && \
      cp build/packages/rebirthdb*.rpm /rebirthdb_packages"
    before_deploy:
    - curl -fL https://getcli.jfrog.io | sh
    - sudo mv jfrog /usr/bin && jfrog --version
    deploy:
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --override=true
        "/rebirthdb_packages/rebirthdb*.rpm"
        $BINTRAY_SUBJECT/rpm/rebirthdb/$(./scripts/gen-version.sh)
        stable/centos/7/x86_64/
      on:
        all_branches: true
        condition: branch =~ /^v[\d]+.[\d]+.[\d]+$/
      skip_cleanup: true
    - provider: script
      script: >-
        JFROG_CLI_OFFER_CONFIG=false
        sudo jfrog bt upload
        --user=$BINTRAY_USER
        --key=$BINTRAY_API_KEY
        --publish=true
        --override=true
        "/rebirthdb_packages/rebirthdb*.rpm"
        $BINTRAY_SUBJECT/rpm/rebirthdb-dev/$(./scripts/gen-version.sh)
        dev/centos/7/x86_64/
      on:
        all_branches: true
      skip_cleanup: true
